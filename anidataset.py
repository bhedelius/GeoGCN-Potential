# -*- coding: utf-8 -*-
"""ANIDataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12tKs6_CXI9vk3VrkvDqzw-tx25UejuaE
"""

import h5py
import numpy as np

import torch
from torch.utils.data import Dataset

# Install Ani-1x Dataset:
#
#wget https://s3-eu-west-1.amazonaws.com/pstorage-npg-968563215/18112775/ani1xrelease.h5

def iter_data_buckets(h5filename, keys=['wb97x_dz.energy']):
    """ Iterate over buckets of data in ANI HDF5 file. 
    Yields dicts with atomic numbers (shape [Na,]) coordinated (shape [Nc, Na, 3])
    and other available properties specified by `keys` list, w/o NaN values.
    """
    keys = set(keys)
    keys.discard('atomic_numbers')
    keys.discard('coordinates')
    with h5py.File(h5filename, 'r') as f:
        for grp in f.values():
            Nc = grp['coordinates'].shape[0]
            mask = np.ones(Nc, dtype=np.bool)
            data = dict((k, grp[k][()]) for k in keys)
            for k in keys:
                v = data[k].reshape(Nc, -1)
                mask = mask & ~np.isnan(v).any(axis=1)
            if not np.sum(mask):
                continue
            d = dict((k, data[k][mask]) for k in keys)
            d['atomic_numbers'] = grp['atomic_numbers'][()]
            d['coordinates'] = grp['coordinates'][()][mask]
            yield d

species_dict = {1: 0, 6: 1, 7: 2, 8: 3}

class AniDataset(Dataset):
  def __init__(self, dir='./'):
    super(AniDataset, self).__init__()
    self.parse(dir)

  def parse(self, dir):
    self.species = []
    self.pos = []
    self.energy = []
    self.forces = []

    h5file = os.path.join(dir,'ani1xrelease.h5')
    iter = iter_data_buckets(h5file, keys=['mp2_tz.corr_energy','wb97x_tz.forces'])
    for molecule in iter:
      species = molecule['atomic_numbers']
      for pos, energy, forces  in zip(molecule['coordinates'], molecule['mp2_tz.corr_energy'], molecule['wb97x_tz.forces']):
        self.species.append(species)
        self.pos.append(pos)
        self.energy.append(energy)
        self.forces.append(forces)

  def __getitem__(self, i):
    pos = self.pos[i]
    species = self.species[i]
    energy = self.energy[i]
    forces = self.forces[i]

    pos = torch.tensor(pos)
    species = torch.tensor([species_dict[atom] for atom in species], dtype=torch.long)
    energy = torch.tensor(energy)
    return pos, species, energy, forces

  def __len__(self):
    return len(self.energy)

#ani_dataset = AniDataset()
